:PROPERTIES:
:ID:       4e2ffa5b-2667-4999-b6d6-8055864557c0
:END:
#+title: C
#+STARTUP: inlineimages latexpreview
#+LAST_MODIFIED: Sun 16 Feb 21:20:39 UTC 2025

* C Programming

Here are all the notes of things I learn regarding the C programming language.

** Data Structures & Algorithms

The following are notes that I take regarding Data Structures & Algorithms.

*** Recursion

A recursive function, is a function that calls itself. This is the general form
of a recursive function:

#+begin_src C
  type
  func (param)
  {
    if (base condition)
      {
        fun (param);
      }
  }
#+end_src

In a recursive function there *must* be a base condition that will determine when
the recursion should end. An example:

#+begin_src C :results output :includes <stdio.h>
  void
  fun1 (int n)
  {
    if (n > 0)
      {
        printf ("%d ", n);
        fun1 (n - 1);
      }
  }

  int
  main (void)
  {
    int x = 3;
    fun1 (x);

    return 0;
  }
#+end_src

#+RESULTS:
: 3 2 1

Trace of the function:

#+begin_src artist
    
     fun1 (3)
     /   \
    /     \
   /       \
  3     fun1 (2)
         /   \
        /     \
       /       \
      2      fun1 (1)
              / \
             /   \
            /     \
           1      fun1 (0)
                   |
                   |
                   |
                   x

#+end_src

Recursion has two phases: /calling phase/ and /returning phase/. If we have the
following function:

#+begin_src C
  void
  fun (int n)
  {
    if (n > 0)
      {
        // Statements here belong to calling time;
        fun (n - 1);
        // Statements here belong to returning time;
      }
  }
#+end_src

Basically, anything executed before the recursive call is called calling time,
and anything executed afterwards is returning time.

**** Static and Global Variables in Recursion

We can use static and global variables with recursion, let's consider the
following function:

#+begin_src C :results output :includes <stdio.h>
  int
  fun (int n)
  {
    static int x = 0;
    if (n > 0)
      {
        x++;
        return fun (n-1) + x;
      }

    return 0;
  }
#+end_src

This is the tracing for that function:

#+begin_src artist

             x
           +---+
           | 5 |
           +---+


      fun (5) = 25   
       |          
       |          
       |  20
      fun (4) + _5_ = 25    x++ = 1
       |                
       |                
       |  15            
      fun (3) + _5_ = 20    x++ = 2
       |
       |
       |  10
      fun (2) + _5_ = 15    x++ = 3
       |
       |
       |   5
      fun (1) + _5_ = 10    x++ = 4
       |
       |
       |   0
      fun (0) + _5_ = 5   x++ = 5
       |
       |
       |
       0
#+end_src

In that function we are adding to each call 5 (which is the final value of ~x~) at
return time, which means that it'll be added after all the calls are finished
and the control keeps returning to the original functions. The output of the
variable ~n~ will be 25. If the variable ~x~ is not static but global, the result
will be the same.

**** Types of recursion

***** Tail Recursion

If the recursive call of a function is the last statement of the function, we
say that it is of type /tail recursion/:

#+begin_src C
  void
  fun (int n)
  {
    if (n > 0)
      {
        printf ("%d\n", n);
        fun (n - 1);
      }
  }

  /* [...] some other code [...] */

  fun (3);
#+end_src

In that very simple function, as the recursive call is the last statement, we
say that it is of type /tail recursion/. Everything is a tail recursive function
is made at calling time, *nothing* is made at return time. Based in that, the
following function, is not of type /tail recursion/:

#+begin_src C
  fun (n)
  {
    if (n > 0)
      {
        // statement
        // statement
        // statement
        fun (n - 1) + n;
      }
  }
#+end_src

As that function has to add ~n~ at returning time, it is *not* a tail recursive
function.

Every tail recursive function can be written as a loop, or vice versa, like
this:

#+begin_src C
  void                            | void
  fun (int n)                     | fun (int n)
  {                               | {
    if (n > 0)                    |    while (n > 0)
      {                           |      {
        printf ("%d ", n);        |         printf ("%d ", n);
        fun (n - 1);              |         n--;
      }                           |      }
  }                               | }
  /* Space - O (1) */             | /* Space - O (n) */
#+end_src

If you have to write tail recursion, you better write it as a loop as recursion
is more expensive in terms of space complexity, as it is in the order of ~n~
whereas the loop is in the order of ~1~, so it's constant. This is because for
each recursive call a new activation record must be created in the stack.

***** Head Recursion

A head recursive function, is a function whose recursive call is the *first*
statement of the function, basically, it does all its processing after the
recursive call. For example:

#+begin_src C
  void
  fun (int n)
  {
    if (n > 0)
      {
        fun (n - 1);
        /* statement */
        /* statement */
        /* statement */
        /* statement */
      }
  }
#+end_src

That is a head recursive function. If a recursive function is neither the type
of head or tail, we just call it a recursive function, there's no special name
for that.

A head recursive function, is to say, that it doesn't do any operations at
calling time, and does all its processing at return time.

Unlike the tail recursive function, we cannot convert a head recursive function
to a loop that easily (we just went through each of the lines and converted it
to a loop), for this we need to approach the problem in a different way. For
example, let's look at the following code:

#+begin_src C :results output :includes <stdio.h>
  void
  fun (int n)
  {
    if (n > 0)
      {
        fun (n - 1);
        printf ("%d ", n);
      }
  }
#+end_src

#+RESULTS:
: 1 2 3 

Its results are 1 2 3. We cannot just make a loop like this:

#+begin_src C :results output :includes <stdio.h>
  void
  fun (int n)
  {
    while (n > 0)
      {
        n--;
        printf ("%d ", n);
      }
  }
#+end_src

#+RESULTS:
: 2 1 0 

That just prints 2 1 0. If we want to have the same output as the head recursive
function using a loop, we need to write the code in a different way, it could be
written like this:

#+begin_src C :results output :includes <stdio.h>
  void
  fun (int n)
  {
    int i = 1;
    while (i <= n)
      {
        printf ("%d ", i);
        i++;
      }
  }
#+end_src

#+RESULTS:
: 1 2 3 

And voila, we have the same output!

***** Tree Recursion

If a recursive function is calling itself only once, it is called a *linear
recursive function*, but if it's called more than once, it is called *tree
recursion*. The following is an example of a tree recursive function:

#+begin_src C :includes <stdio.h> :results output
  void
  fun (int n)
  {
    if (n > 0)
      {
        printf ("%d ", n);
        fun (n - 1);
        fun (n - 1);
      }
  }
#+end_src

#+RESULTS:
: 3 2 1 1 2 1 1 

The tracing for that function is the following:

[[file:images/recursion/tree_trace1.jpeg]]

***** Indirect Recursion

In indirect recursion there might be more than one function, and they are
calling each other in a circular fashion.

#+begin_src artist
                     +-----+
                     |     |
                     |  A  |
                     |     |
                     +-----+
                    /       \            
                   /         \
                  /           \
                 /             \
                /               \
        +------+                 +-----+
        |      |                 |     |
        |  C   +-----------------+  B  |
        |      |                 |     |
        +------+                 +-----+
#+end_src

There we have three functions: *A*, *B*, and *C*. *A* calls *B*, *B* calls *C*, and *C* calls *A*
again.

Let's look at an actual example:

#+begin_src C :results output :includes <stdio.h>
  void A (int);
  void B (int);

  void
  A (int n)
  {
    if (n > 0)
      {
        printf ("%d\n", n);
        B (n-1);
      }
  }

  void
  B (int n)
  {
    if (n > 1)
      {
        printf ("%d\n", n);
        A (n / 2);
      }
  }
#+end_src

#+RESULTS:
: 20 19 9 8 4 3 1

This is the tracing of that function:

#+begin_src artist
      A (20)
     /   \
    /     \
   /       \
  20        B (19)
           /  \
          /    \
         /      \
        19       A (9) 
                / \
               /   \
              /     \
             9       B (8)
                    / \
                   /   \
                  /     \
                 8       A (4)
                        / \
                       /   \
                      /     \
                     4       B (3)
                            / \
                           /   \
                          /     \
                         3       A (1)
                                / \
                               /   \
                              /     \
                             1       B (0)
                                      |
                                      |
                                      |
                                      x
#+end_src

***** Nested Recursion

A nested recursive function, is a function that is recursive, but its argument
is a call of itself, for example:

#+begin_src C
  void
  fun (int n)
  {
    if (< comparison here >)
      {
        /* statement */
        /* statement */
        fun (fun (n - 1));
      }
  }
#+end_src

Let's look at an actual function:

#+begin_src C :results output :includes <stdio.h>
  int
  fun (int n)
  {
    if (n > 100)
      return n - 10;
    else
      return fun (fun (n + 11));
  }
#+end_src

#+RESULTS:
: 91

[[file:images/recursion/nested_trace1.jpeg]]

**** Uses of recursion

Let's solve some actual problems using recursion

***** Sum of N natural numbers

Let's suppose we have a natural number N, we want to obtain the sum of all the
other natural numbers until N. Basically, we want to do this: $1 + 2 + 3 + 4 +
\cdots + n$. The definition will be the following:

\begin{equation}
\text{sum}(n) = \begin{cases}
0, & n = 0\\
\text(sum)(n - 1)+n, & n > 0
\end{cases}
\end{equation}

With that definition, we can write the recursive function in C like this:

#+begin_src C :results output :includes <stdio.h>
  int
  sum (int n)
  {
    if (n == 0)
      return n;
    return sum (n - 1) + n;
  }
#+end_src

If we run ~sum (7)~, the output would be the following:

#+RESULTS:
: 28

This can also be implemented as a loop, and it will be less costly, as recursion
uses the stack:

#+begin_src C
  int sum = 0;
  for (int i = 0; i <= n; i++)
    {
      sum += i;
    }
#+end_src


However, as we know, there's already a formula for getting the sum of a natural
number, which is the following:

\begin{equation}
\text{sum}(n) = \frac{n (n + 1)}{2}
\end{equation}

Which can also be implemented like this:

#+begin_src C
  int sum = (n * (n + 1)) / 2;
#+end_src

***** Factorial of a number

We can define the factorial of a number recursively like this:

\begin{equation}
\text{fact}(n) = \begin{cases}
1, & n = 0\\
\text{fact}(n - 1) \times n, & n > 0
\end{cases}
\end{equation}

So the recursive function can be defined like this:

#+begin_src C :results output :includes <stdio.h>
  int
  fact (int n)
  {
    if (n == 0)
      return 1;
    return fact (n - 1) * n;
  }
#+end_src

If we ran ~fact (5)~, the output would be the following:

#+RESULTS:
: 120

***** Power of a number

We can define the product of a number recursively like this:

\begin{equation}
\text{pow}(m, n) = \begin{cases}
1, & n = 0\\
\text{pow}(m, n - 1) \times m, & n > 0
\end{cases}
\end{equation}

So we can implement it in C like this:

#+begin_src C :results output :includes <stdio.h>
  int
  pow (int m, int n)
  {
    if (n == 0)
      return 1;
    return pow (m, n - 1) * n;
  }
#+end_src

If we ran ~pow (2, 5)~, the output would be the following:

#+RESULTS:
: 120

However, we can write a faster function, if we do this $2^8 = (2 \times 2)^4$, we are
reducing the number of multiplications by half, that works if we have an even
number, if we have an odd number, we can just add another multiplication like
this: $2^9 = 2 \times (2 \times 2)^4$. It can be implemented in C like this:

#+begin_src C :results output :includes <stdio.h>
  int
  pow (int m, int n)
  {
    if (n == 0)
      return 1;

    if (n % 2 == 0)
      return pow (m * m, n / 2);
    return m * pow (m * m, (n - 1) / 2);
  }
#+end_src

If we run ~pow (2, 9)~ the output would be the following:

#+RESULTS:
: 512

And if we run ~pow (2, 8)~ the output would be the following:

#+RESULTS:
: 256

[[file:images/recursion/pow_trace1.jpg]]


***** Fibonacci Series using Recursion

We can define the fibonacci series recursively like this:

\begin{equation}
\text{fib}(n) = \begin{cases}
0, & n = 0\\
1, & n = 1\\
\text{fib}(n - 1) + \text{fib}(n - 1), & n > 1
\end{cases}
\end{equation}

And it can be written in C like this:

#+begin_src C :results output :includes <stdio.h>
  int
  fib (int n)
  {
    if (n <= 1)
      return n;

    return fib (n - 2) + fib (n - 1);
  }
#+end_src

If we want to obtain the 7th term in the fibonacci series, we can run ~fib (7)~,
and the output would be the following:

#+RESULTS:
: 13

We can write a solution to this problem using a for loop too:

#+begin_src C :results output :includes <stdio.h>
  int
  fib (int n)
  {
    if (n <= 1)
      return n;

    int t0 = 0, t1 = 1, sum = 0;
    for (int i = 2; i <= n; i++)
      {
        sum = t0 + t1;
        t0 = t1;
        t1 = sum;
      }

    return sum;
  }
#+end_src

And as with the previous one, if we call ~fib (7)~, the result would be:

#+RESULTS:
: 13

The trace of the recursive function is the following:

[[file:images/recursion/fibonacci_trace1.jpg]]

If we take a look at the tracing for that function, we see that it's calling
itself several times for ~fib(3)~, ~fib(2)~, and ~fib(1)~ and 0. That is called
*Excessive Recursion*.

What we can do to avoid all those excessive calls is holding the values that we
know in an array, and to avoid the calls for the values we already know. That is
called /Memoization/. The new function would look like this:

#+begin_src C
  int F [10];

  int
  fib (int n)
  {
    if (n <= 1)
      {
        F[n] = n;
        return n;
      }

    if (F[n - 2] == -1)
      F[n - 2] = fib (n - 2);
    if (F[n - 1] == -1)
      F[n - 1] = fib (n - 1);

    return F[n - 2] + F[n - 1];
  }
#+end_src

***** Tower of Hanoi

The tower of hanoi problem is the following:

[[file:images/recursion/hanoi_example.jpg]]

It consists of moving all the disks from tower A to tower C, using the auxiliary
tower B. The rule, is that a big disk cannot go above a smaller disk, and only
one disk can be moved at a time.

Now, let's try to come up with a recursive solution for this problem:

If we have just one disk, we can move it directly from A to C:

[[file:images/recursion/hanoi_step1.jpg]]

We move the disk from A to B, using C as an auxiliary tower. So we'd call the ~TOH~ function like this: ~TOH (1, A, B, C)~.

If we have two disks, we move the first disk to B, the big disk to C, and the small disk to B:

[[file:images/recursion/hanoi_step2.jpg]]

In that we are moving the small disk from A to B, using C as auxiliary, moving
disk from A to C, using B as auxiliary, and moving disk from B to C using A as
auxiliary.

If we have want to move three disks:

[[file:images/recursion/hanoi_step3.jpg]]

In that step we are moving ~n-1~ disks from A to B, moving the disk from A to C,
and moving ~n-1~ disks from B to C. I said before that only one disk can be moved
at a time, but we are doing that, when we are moving ~n-1~ disks, we are
recursively moving disks from the first one to the last one. We are just
repeating the steps that we analysed before.

The recursive function is the following:

#+begin_src C :results output :includes <stdio.h>
  void
  TOH (int n, int A, int B, int C)
  {
    if (n <= 0)
      return;

    TOH (n - 1, A, C, B);
    printf ("from %d to %d\n", A, C);
    TOH (n - 1, B, A, C);
  }
#+end_src

#+RESULTS:
: from 1 to 3
: from 1 to 2
: from 3 to 2
: from 1 to 3
: from 2 to 1
: from 2 to 3
: from 1 to 3
